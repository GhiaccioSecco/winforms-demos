<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Average" xml:space="preserve">
    <value>Moyenne</value>
  </data>
  <data name="BaseField" xml:space="preserve">
    <value>Champ de base</value>
  </data>
  <data name="BaseItem" xml:space="preserve">
    <value>Élément de base</value>
  </data>
  <data name="Cancel" xml:space="preserve">
    <value>Annuler</value>
  </data>
  <data name="Choosefieldstoaddreport" xml:space="preserve">
    <value>Choisir les champs à ajouter au rapport</value>
  </data>
  <data name="ClearFilter" xml:space="preserve">
    <value>Effacer le filtre</value>
  </data>
  <data name="ColumnLabels" xml:space="preserve">
    <value>Colonnes</value>
  </data>
  <data name="Count" xml:space="preserve">
    <value>Compter</value>
  </data>
  <data name="CountNumbers" xml:space="preserve">
    <value>Compter les nombres</value>
  </data>
  <data name="Custom" xml:space="preserve">
    <value>Douane</value>
  </data>
  <data name="DecimalTotalSum" xml:space="preserve">
    <value>Somme totale décimale</value>
  </data>
  <data name="DeferlayoutUpdate" xml:space="preserve">
    <value>Différer la mise à jour de la mise en page</value>
  </data>
  <data name="Description" xml:space="preserve">
    <value>La description</value>
  </data>
  <data name="DifferenceFrom" xml:space="preserve">
    <value>Différence de</value>
  </data>
  <data name="DisplayIfDiscreteValuesEqual" xml:space="preserve">
    <value>Afficher si les valeurs discrètes sont égales</value>
  </data>
  <data name="Distinct" xml:space="preserve">
    <value>Distincte</value>
  </data>
  <data name="DoubleAverage" xml:space="preserve">
    <value>Double moyenne</value>
  </data>
  <data name="DoubleMaximum" xml:space="preserve">
    <value>Double Maximum</value>
  </data>
  <data name="DoubleMinimum" xml:space="preserve">
    <value>Double Minimum</value>
  </data>
  <data name="DoubleStandardDeviation" xml:space="preserve">
    <value>Double écart type</value>
  </data>
  <data name="DoubleTotalSum" xml:space="preserve">
    <value>Double Somme Totale</value>
  </data>
  <data name="DoubleVariance" xml:space="preserve">
    <value>Double Variance</value>
  </data>
  <data name="Dragfieldsbetweenareasbelow" xml:space="preserve">
    <value>Faites glisser les champs entre les zones ci-dessous</value>
  </data>
  <data name="DropPivotFieldsheretoFilterBy" xml:space="preserve">
    <value>Déposer les champs de pivot ici pour filtrer par</value>
  </data>
  <data name="FieldHeader" xml:space="preserve">
    <value>En-tête de champ</value>
  </data>
  <data name="FieldName" xml:space="preserve">
    <value>Nom de domaine</value>
  </data>
  <data name="Format" xml:space="preserve">
    <value>Format</value>
  </data>
  <data name="Formula" xml:space="preserve">
    <value>Formule</value>
  </data>
  <data name="GrandTotal" xml:space="preserve">
    <value>Grandiose</value>
  </data>
  <data name="Index" xml:space="preserve">
    <value>Indice</value>
  </data>
  <data name="IntTotalSum" xml:space="preserve">
    <value>Int Total Sum</value>
  </data>
  <data name="Max" xml:space="preserve">
    <value>Max</value>
  </data>
  <data name="Min" xml:space="preserve">
    <value>Min</value>
  </data>
  <data name="MoveDown" xml:space="preserve">
    <value>Descendre</value>
  </data>
  <data name="MoveToBeginning" xml:space="preserve">
    <value>Aller au début</value>
  </data>
  <data name="MoveToColumnLabels" xml:space="preserve">
    <value>Déplacer vers les étiquettes de colonne</value>
  </data>
  <data name="MoveToEnd" xml:space="preserve">
    <value>Déplacer pour terminer</value>
  </data>
  <data name="MoveToReportFilter" xml:space="preserve">
    <value>Déplacer vers le filtre de rapport</value>
  </data>
  <data name="MoveToRowLabels" xml:space="preserve">
    <value>Déplacer vers les étiquettes de lignes</value>
  </data>
  <data name="MoveToValues" xml:space="preserve">
    <value>Déplacer aux valeurs</value>
  </data>
  <data name="MoveUp" xml:space="preserve">
    <value>Déplacer vers le haut</value>
  </data>
  <data name="NoCalculation" xml:space="preserve">
    <value>Pas de calcul</value>
  </data>
  <data name="OK" xml:space="preserve">
    <value>D'accord</value>
  </data>
  <data name="PercentageOf" xml:space="preserve">
    <value>% De</value>
  </data>
  <data name="PercentageOfColumnTotal" xml:space="preserve">
    <value>% du total de la colonne</value>
  </data>
  <data name="PercentageOfDifferenceFrom" xml:space="preserve">
    <value>% de différence de</value>
  </data>
  <data name="PercentageOfGrandTotal" xml:space="preserve">
    <value>% du total général</value>
  </data>
  <data name="PercentageOfParentColumnTotal" xml:space="preserve">
    <value>% du total de la colonne parent</value>
  </data>
  <data name="PercentageOfParentRowTotal" xml:space="preserve">
    <value>% du total de la ligne parent</value>
  </data>
  <data name="PercentageOfParentTotal" xml:space="preserve">
    <value>% du parent total</value>
  </data>
  <data name="PercentageOfRowTotal" xml:space="preserve">
    <value>% du total de la ligne</value>
  </data>
  <data name="PercentageOfRunningTotalIn" xml:space="preserve">
    <value>% du total en cours d'exécution</value>
  </data>
  <data name="PivotComputationInformation" xml:space="preserve">
    <value>Informations de calcul de pivot</value>
  </data>
  <data name="PivotSchemaDesigner" xml:space="preserve">
    <value>Concepteur de schéma de pivot</value>
  </data>
  <data name="PivotTableFieldList" xml:space="preserve">
    <value>Tableau de tableau croisé dynamique</value>
  </data>
  <data name="PivotValueChooser" xml:space="preserve">
    <value>Sélecteur de valeur de pivot</value>
  </data>
  <data name="RankLargestToSmallest" xml:space="preserve">
    <value>Rang le plus grand au plus petit</value>
  </data>
  <data name="RankSmallestToLargest" xml:space="preserve">
    <value>Rang du plus petit au plus grand</value>
  </data>
  <data name="RemoveField" xml:space="preserve">
    <value>Supprimer le champ</value>
  </data>
  <data name="ReportFilter" xml:space="preserve">
    <value>Les filtres</value>
  </data>
  <data name="RowLabel" xml:space="preserve">
    <value>Lignes</value>
  </data>
  <data name="RunningTotalIn" xml:space="preserve">
    <value>Running Total In</value>
  </data>
  <data name="SelectAll" xml:space="preserve">
    <value>Tout sélectionner</value>
  </data>
  <data name="ShowCalculationsasColumns" xml:space="preserve">
    <value>Afficher les calculs sous forme de colonnes</value>
  </data>
  <data name="ShowValueAs" xml:space="preserve">
    <value>Afficher la valeur en tant que</value>
  </data>
  <data name="SortLargestToSmallest" xml:space="preserve">
    <value>Trier du plus grand au plus petit</value>
  </data>
  <data name="SortSmallestToLargest" xml:space="preserve">
    <value>Trier du plus petit au plus grand</value>
  </data>
  <data name="StdDev" xml:space="preserve">
    <value>StdDev</value>
  </data>
  <data name="StdDevP" xml:space="preserve">
    <value>StdDevP</value>
  </data>
  <data name="Sum" xml:space="preserve">
    <value>Somme</value>
  </data>
  <data name="SummarizeValueBy" xml:space="preserve">
    <value>Résumer la valeur par</value>
  </data>
  <data name="Total" xml:space="preserve">
    <value>Totale</value>
  </data>
  <data name="Update" xml:space="preserve">
    <value>Mise à jour</value>
  </data>
  <data name="Values" xml:space="preserve">
    <value>Valeurs</value>
  </data>
  <data name="Var" xml:space="preserve">
    <value>Var</value>
  </data>
  <data name="VarP" xml:space="preserve">
    <value>VarP</value>
  </data>
</root>